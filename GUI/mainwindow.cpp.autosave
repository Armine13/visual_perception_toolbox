#include "mainwindow.h"
#include "ui_mainwindow.h"
#include "imageprocessing.h"
#include "thirdParty/cvMatToQImage.cpp"
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/core/core.hpp>

#include <QDebug>
#include <QFileDialog>

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);
    QIcon::setThemeName("Tango");//custom theme for icons

    // Add icons to buttons
    //File
    ui->actionNew->setIcon(QIcon::fromTheme("document-new"));
    ui->actionOpen->setIcon(QIcon::fromTheme("image-x-generic"));
    ui->actionSave_As->setIcon(QIcon::fromTheme("document-save-as"));
    ui->actionSave->setIcon(QIcon::fromTheme("document-save"));
    ui->actionClose->setIcon(QIcon::fromTheme("document-close"));
    ui->actionExit->setIcon(QIcon::fromTheme("exit"));
    //Edit
    ui->actionUndo->setIcon(QIcon::fromTheme("edit-undo"));
    ui->actionRedo->setIcon(QIcon::fromTheme("edit-redo"));
    ui->actionHistory->setIcon(QIcon::fromTheme("appointment-new"));
    //Help
    ui->actionAbout->setIcon(QIcon::fromTheme("help-browser"));


    //Initializing local variables
    cv::Mat openImage(cv::Size(320,240),CV_8UC3);

}

MainWindow::~MainWindow()
{
    delete ui;
}
void MainWindow::on_actionClose_triggered()
{
    //triggered from File menu
}

void MainWindow::on_actionNew_triggered()
{
}


void MainWindow::on_actionExit_triggered()
{
    QCoreApplication::quit();
}

void MainWindow::on_actionOpen_triggered()
{
    QString fileName = QFileDialog::getOpenFileName(this,
                                                       tr("Open Image"), "", tr("Image Files (*.png *.jpg *.bmp)"));

    // Load the image through opencv
    openImage = cv::imread(fileName.toStdString());
    assert(!openImage.empty());

    //Load and display image in qt label
    QImage openQImage;

    if (!openQImage.load(fileName))
        return;

    ui->imageLabel->setPixmap(QPixmap::fromImage(openQImage));

    // Adjust sizes of labels to contained images
    ui->imageLabel->setMinimumSize(openQImage.size());
    this->setMinimumSize(openQImage.size());
}

void MainWindow::on_actionMean_triggered()
{
    ImageProcessing imProc(openImage);
    
    openImage = imProc.filterMean();
    ui->imageLabel->setPixmap(QPixmap::fromImage(cvMatToQImage(openImage)));

}
